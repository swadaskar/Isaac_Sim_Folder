#usda 1.0
(
    doc ="""Generated from node description file OgnIntervalFiltering.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_replicator_isaac_OgnIntervalFiltering" (
        docs="""Outputs indices if their frame count is a multiple of the interval"""
    )
    {
        token node:type = "omni.replicator.isaac.OgnIntervalFiltering"
        int node:typeVersion = 1

        # 5 attributes
        custom uint inputs:execIn (
            docs="""exec"""
        )
        custom int[] inputs:frameCounts = [] (
            docs="""the current frame number for every environment"""
        )
        custom bool inputs:ignoreInterval = false (
            docs="""if true, will just pass indices to downstream node"""
        )
        custom int[] inputs:indices = [] (
            docs="""a list of indices to use in case of ignoring interval"""
        )
        custom int inputs:interval = 0 (
            docs="""randomization will take place once every `interval` frames"""
        )

        # 3 attributes
        custom uint outputs:execOut (
            docs="""exec"""
        )
        custom int[] outputs:indices (
            docs="""the indices that are at the interval and need to be randomized"""
        )
        custom bool outputs:on_reset (
            docs="""indicates whether an on_reset context triggered the execution"""
        )
    }
}
