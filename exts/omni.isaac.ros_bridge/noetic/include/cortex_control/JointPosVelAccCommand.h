// Generated by gencpp from file cortex_control/JointPosVelAccCommand.msg
// DO NOT EDIT!


#ifndef CORTEX_CONTROL_MESSAGE_JOINTPOSVELACCCOMMAND_H
#define CORTEX_CONTROL_MESSAGE_JOINTPOSVELACCCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace cortex_control
{
template <class ContainerAllocator>
struct JointPosVelAccCommand_
{
  typedef JointPosVelAccCommand_<ContainerAllocator> Type;

  JointPosVelAccCommand_()
    : header()
    , id(0)
    , period()
    , t()
    , names()
    , q()
    , qd()
    , qdd()  {
    }
  JointPosVelAccCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , period()
    , t()
    , names(_alloc)
    , q(_alloc)
    , qd(_alloc)
    , qdd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _id_type;
  _id_type id;

   typedef ros::Duration _period_type;
  _period_type period;

   typedef ros::Time _t_type;
  _t_type t;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _names_type;
  _names_type names;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _q_type;
  _q_type q;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _qd_type;
  _qd_type qd;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _qdd_type;
  _qdd_type qdd;





  typedef boost::shared_ptr< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> const> ConstPtr;

}; // struct JointPosVelAccCommand_

typedef ::cortex_control::JointPosVelAccCommand_<std::allocator<void> > JointPosVelAccCommand;

typedef boost::shared_ptr< ::cortex_control::JointPosVelAccCommand > JointPosVelAccCommandPtr;
typedef boost::shared_ptr< ::cortex_control::JointPosVelAccCommand const> JointPosVelAccCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cortex_control::JointPosVelAccCommand_<ContainerAllocator1> & lhs, const ::cortex_control::JointPosVelAccCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.period == rhs.period &&
    lhs.t == rhs.t &&
    lhs.names == rhs.names &&
    lhs.q == rhs.q &&
    lhs.qd == rhs.qd &&
    lhs.qdd == rhs.qdd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cortex_control::JointPosVelAccCommand_<ContainerAllocator1> & lhs, const ::cortex_control::JointPosVelAccCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cortex_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "150bb2ee3b92d2156bc3b45a48477ca0";
  }

  static const char* value(const ::cortex_control::JointPosVelAccCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x150bb2ee3b92d215ULL;
  static const uint64_t static_value2 = 0x6bc3b45a48477ca0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cortex_control/JointPosVelAccCommand";
  }

  static const char* value(const ::cortex_control::JointPosVelAccCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Basic joint position, velocity, and feed-forward acceleration command.\n"
"# Typically, q and qd are used for PID control, and qdd is used by inverse\n"
"# dynamics to compute a feed forward term.\n"
"#\n"
"# These message contain enough information to reconstruct the specific integral\n"
"# curve on the receiving side using quintic polynomial interpolation\n"
"# (rectifying the messages against jitter). See CommandStreamInterpolator.\n"
"\n"
"# Contains the wall-clock time stamp (unless otherwise specified explicitly\n"
"# during construction of the Cortex commander).\n"
"std_msgs/Header header\n"
"\n"
"# id's increment by one each, and period gives the amount of time between the\n"
"# the previous message (with message ID id-1) and this\n"
"int64 id\n"
"duration period\n"
"\n"
"# This time stamp is the exact controller time in the sense that\n"
"#\n"
"#   msg[id+1].t - msg[id].t = msg[id+1].period\n"
"#\n"
"# The header gives the wall-clock time at publication (unless otherwise\n"
"# specified during initialization of the Cortex commander) so we can observe any\n"
"# jitter in plotters such as rqt_plot which read the header time stamps to\n"
"# rectify the incoming messages.\n"
"time t\n"
"\n"
"string[] names\n"
"float64[] q\n"
"float64[] qd\n"
"float64[] qdd\n"
"\n"
"#SymmetricMatrix32 metric\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::cortex_control::JointPosVelAccCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.period);
      stream.next(m.t);
      stream.next(m.names);
      stream.next(m.q);
      stream.next(m.qd);
      stream.next(m.qdd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointPosVelAccCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cortex_control::JointPosVelAccCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cortex_control::JointPosVelAccCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "period: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.period);
    s << indent << "t: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t);
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "qd[]" << std::endl;
    for (size_t i = 0; i < v.qd.size(); ++i)
    {
      s << indent << "  qd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qd[i]);
    }
    s << indent << "qdd[]" << std::endl;
    for (size_t i = 0; i < v.qdd.size(); ++i)
    {
      s << indent << "  qdd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qdd[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORTEX_CONTROL_MESSAGE_JOINTPOSVELACCCOMMAND_H
