#usda 1.0
(
    doc ="""Generated from node description file OgnROS1RtxLidarHelper.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_isaac_ros_bridge_ROS1RtxLidarHelper" (
        docs="""Handles automation of Lidar Sensor pipeline"""
    )
    {
        token node:type = "omni.isaac.ros_bridge.ROS1RtxLidarHelper"
        int node:typeVersion = 1

        # 9 attributes
        custom uint64 inputs:context = 0 (
            docs="""ROS context handle, default of zero will use the global context"""
        )
        custom uint inputs:execIn (
            docs="""Triggering this causes the sesnor pipeline to be generated"""
        )
        custom string inputs:frameId = "sim_lidar" (
            docs="""FrameID for the ROS1 message"""
        )
        custom string inputs:nodeNamespace = "" (
            docs="""Namespace of ROS1 Node, prepends and published/subscribed topic by the node namespace"""
        )
        custom uint64 inputs:queueSize = 10 (
            docs="""Number of message to queue up before throwing away, in case messages are collected faster than they can be sent"""
        )
        custom token inputs:renderProductPath = "" (
            docs="""Name of the render product path to publish lidar data"""
        )
        custom bool inputs:resetSimulationTimeOnStop = false (
            docs="""If True the simulation time will reset when stop is pressed, False means time increases monotonically"""
        )
        custom string inputs:topicName = "scan" (
            docs="""Topic name for sensor data"""
        )
        custom token inputs:type = "laser_scan" (
            docs="""Data to publsih from node"""
        )
    }
}
