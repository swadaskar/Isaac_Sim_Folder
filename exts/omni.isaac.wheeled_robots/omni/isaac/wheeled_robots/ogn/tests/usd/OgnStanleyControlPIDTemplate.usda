#usda 1.0
(
    doc ="""Generated from node description file OgnStanleyControlPID.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_isaac_wheeled_robots_StanleyControlPID" (
        docs="""Drive to Target Steering"""
    )
    {
        token node:type = "omni.isaac.wheeled_robots.StanleyControlPID"
        int node:typeVersion = 1

        # 14 attributes
        custom quatd inputs:currentOrientation = (0.0, 0.0, 0.0, 0.0) (
            docs="""Current rotation of the robot as a quaternion (recommended to use Get Prim Local to World Transform node)"""
        )
        custom vector3d inputs:currentPosition = (0.0, 0.0, 0.0) (
            docs="""Current position of the robot (recommended to use Get Prim Local to World Transform node)"""
        )
        custom vector3d inputs:currentSpeed = (0.0, 0.0, 0.0) (
            docs="""Current linear velocity of the robot"""
        )
        custom bool inputs:drawPath = false (
            docs="""Draw the provided path curve onto the stage"""
        )
        custom uint inputs:execIn (
            docs="""The input execution"""
        )
        custom double3 inputs:gains = (0.5, 0.1, 0.0872665) (
            docs="""control, velocity and steering gains"""
        )
        custom double inputs:maxVelocity = 1.5 (
            docs="""Maximum linear velocity of the robot"""
        )
        custom double[] inputs:pathArrays = [] (
            docs="""The path v, x, y, and yaw arrays"""
        )
        custom bool[] inputs:reachedGoal = ['false', 'false'] (
            docs="""Position and orientation thresholds at target"""
        )
        custom double inputs:step = 0.16666666667 (
            docs="""Step"""
        )
        custom double3 inputs:target = (0, 0, 0) (
            docs="""Target position and orientation"""
        )
        custom bool inputs:targetChanged = false (
            docs="""Target position/orientation has changed"""
        )
        custom double2 inputs:thresholds = (0.1, 0.1) (
            docs="""Position and orientation thresholds at target"""
        )
        custom double inputs:wheelBase = 0.4132 (
            docs="""Distance between the centers of the front and rear wheels"""
        )

        # 3 attributes
        custom double outputs:angularVelocity (
            docs="""Current angular speed for robot drive"""
        )
        custom uint outputs:execOut (
            docs="""The output execution"""
        )
        custom double outputs:linearVelocity (
            docs="""Current forward speed for robot drive"""
        )
    }
}
