#usda 1.0
(
    doc ="""Generated from node description file OgnIsaacComputeRTXLidarPointCloud.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_isaac_sensor_IsaacComputeRTXLidarPointCloud" (
        docs="""This node reads from the an RTX Lidar sensor and holds point cloud data buffers"""
    )
    {
        token node:type = "omni.isaac.sensor.IsaacComputeRTXLidarPointCloud"
        int node:typeVersion = 1

        # 7 attributes
        custom float inputs:accuracyErrorAzimuthDeg = 0.0 (
            docs="""Accuracy error of azimuth in degrees applied to all points equally"""
        )
        custom float inputs:accuracyErrorElevationDeg = 0.0 (
            docs="""Accuracy error of elevation in degrees applied to all points equally"""
        )
        custom float3 inputs:accuracyErrorPosition = (0.0, 0.0, 0.0) (
            docs="""Position offset applied to all points equally"""
        )
        custom uint64 inputs:cpuPointer = 0 (
            docs="""CPU Pointer to LiDAR render result."""
        )
        custom uint inputs:execIn (
            docs="""The input execution port"""
        )
        custom bool inputs:keepOnlyPositiveDistance = true (
            docs="""Keep points only if the return distance is > 0"""
        )
        custom token inputs:renderProductPath = "" (
            docs="""Path of the renderProduct to wait for being rendered"""
        )

        # 7 attributes
        custom float[] outputs:azimuth = [] (
            docs="""azimuth in rad [-pi,pi]"""
        )
        custom float[] outputs:elevation = [] (
            docs="""elevation in rad [-pi/2, pi/2]"""
        )
        custom uint outputs:execOut (
            docs="""Output execution triggers when lidar sensor has data"""
        )
        custom float[] outputs:intensity = [] (
            docs="""intensity [0,1]"""
        )
        custom point3f[] outputs:pointCloudData = [] (
            docs="""Buffer of 3d points containing point cloud data in Lidar coordinates"""
        )
        custom float[] outputs:range = [] (
            docs="""range in m"""
        )
        custom matrix4d outputs:toWorldMatrix (
            docs="""The transform matrix from lidar to world coordinates"""
        )
    }
}
