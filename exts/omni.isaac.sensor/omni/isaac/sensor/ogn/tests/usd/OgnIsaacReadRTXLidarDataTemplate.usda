#usda 1.0
(
    doc ="""Generated from node description file OgnIsaacReadRTXLidarData.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_isaac_sensor_IsaacReadRTXLidarData" (
        docs="""This node reads the data straight from the an RTX Lidar sensor."""
    )
    {
        token node:type = "omni.isaac.sensor.IsaacReadRTXLidarData"
        int node:typeVersion = 1

        # 3 attributes
        custom uint64 inputs:cpuPointer = 0 (
            docs="""CPU Pointer to LiDAR render result."""
        )
        custom uint inputs:execIn (
            docs="""The input execution port"""
        )
        custom bool inputs:keepOnlyPositiveDistance = true (
            docs="""Keep points only if the return distance is > 0"""
        )

        # 14 attributes
        custom float[] outputs:azimuth = [] (
            docs="""azimuth in rad [-pi,pi]"""
        )
        custom uint[] outputs:beamId = [] (
            docs="""beam/laser detector id"""
        )
        custom float[] outputs:distance = [] (
            docs="""distance in m"""
        )
        custom uint[] outputs:echoId = [] (
            docs="""echo id in ascending order"""
        )
        custom float[] outputs:elevation = [] (
            docs="""elevation in rad [-pi/2, pi/2]"""
        )
        custom uint[] outputs:emitterId = [] (
            docs="""beam/laser detector id"""
        )
        custom uint outputs:execOut (
            docs="""Output execution triggers when lidar sensor has data"""
        )
        custom point3f[] outputs:hitPointNormal = [] (
            docs="""hit point Normal"""
        )
        custom float[] outputs:intensity = [] (
            docs="""intensity [0,1]"""
        )
        custom uint[] outputs:materialId = [] (
            docs="""hit point material id"""
        )
        custom uint64[] outputs:objectId = [] (
            docs="""hit point object id"""
        )
        custom uint[] outputs:tick = [] (
            docs="""tick of point"""
        )
        custom uint64[] outputs:timeStampNs = [] (
            docs="""absolute timeStamp in nano seconds"""
        )
        custom point3f[] outputs:velocityMs = [] (
            docs="""velocity at hit point in sensor coordinates [m/s]"""
        )
    }
}
